#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

[main]

#######
# configure a couple of iniRealms
# (nb: not possible for their .ini files to live in WEB-INF, because Shiro does not
# provide a mechanism to load resources from that location)
#######

#realm1 = org.apache.shiro.realm.text.IniRealm
#realm1.resourcePath=classpath:webapp/realm1.ini

#realm2 = org.apache.shiro.realm.text.IniRealm
#realm2.resourcePath=classpath:webapp/realm2.ini



#######
# configure an ldap-based realm
#######


ds = org.postgresql.ds.PGPoolingDataSource
ds.serverName = localhost
# 0 is the default port
ds.databaseName = isis
ds.user = isis
ds.password = isis


# Next, configure Shiro to use that to extract credentials
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource = $ds
jdbcRealm.permissionsLookupEnabled = true
sha256Matcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
jdbcRealm.credentialsMatcher = $sha256Matcher
jdbcRealm.authenticationQuery = SELECT password FROM "Login" WHERE usuario = ?
jdbcRealm.userRolesQuery = select a.rol from "Rol" a, "Login" b where a."Rol_ID"=b."rol_Rol_ID_OID" and b.usuario= ?
jdbcRealm.permissionsQuery = SELECT permiso FROM "Permisos" WHERE "listaPermiso_Rol_ID_OID" = (SELECT "Rol_ID" FROM "Rol" WHERE rol = ?)

# optional mapping from physical groups to logical application roles
#ldapRealm.rolesByGroup = \
#    LDN_USERS: user_role,\
#    NYK_USERS: user_role,\
#    HKG_USERS: user_role,\
#    GLOBAL_ADMIN: admin_role,\
#    DEMOS: self-install_role

# configuring ldapRealm role/perm mappings
# (use same as realm1)
#ldapRealm.resourcePath=classpath:webapp/realm1.ini


#######
# configure security manager to use realm(s)
#######

# authenticate/authorize first with realm1, then realm2
#securityManager.realms = $realm1,$realm2


# or to use ldap with realm1 as a backup...
# (see docs for details of how to setup users/groups in Apache Directory Studio).
#securityManager.realms = $ldapRealm,$realm1


# or to just use this .ini file...
# (would require [users] and [roles] to be set up)
#securityManager.realms = $iniRealm



# -----------------------------------------------------------------------------
# Users and their assigned roles
# -----------------------------------------------------------------------------
securityManager.realms = $jdbcRealm
[users]
# user = password, role1, role2, role3, ...



[roles]
# role = perm1, perm2, perm3, ...
# perm in format: packageName:className:memberName:r,w


